#version 460
#extension GL_NV_ray_tracing : enable

#include "Common.glsl"
#include "BRDF.glsl"

#define USE_DEBUG_FURNECE          false
#define USE_DEBUG_REFLECTIONS      false
#define USE_DEBUG_SKY              false
#define USE_DIRECT_LIGHTING        true
#define USE_INDIRECT_SPECULAR      true
#define USE_ROUGHNESS_BIAS         true

layout(location = 0) rayPayloadNV DefaultPayload payload;

vec3 getCameraViewVector(vec2 uv)
{
	vec3 viewVector = vec3((uv-0.5) * 2, 1);
	viewVector.x /= matProj[0].x;
	viewVector.y /= matProj[1].y;
	return normalize(viewVector * transpose(mat3(matView)));
}

bool traceRay(RayDesc ray)
{
	uint rayFlags = gl_RayFlagsOpaqueNV;

	payload.hitT = 0;
	traceNV(TLAS,
		rayFlags,		// uint rayFlags
		~0u, 			// uint cullMask
		0u,	 			// uint sbtRecordOffset
		1u, 			// uint sbtRecordStride
		0u,				// uint missIndex
		ray.origin,		// vec3 origin
		ray.minT,	    // float Tmin
		ray.direction,  // vec3 direction
		ray.maxT,		// float Tmax
		0				// int payload
	);

	return payload.hitT >= 0;
}

bool traceShadowRay(RayDesc ray)
{
	uint rayFlags = gl_RayFlagsOpaqueNV | gl_RayFlagsTerminateOnFirstHitNV | gl_RayFlagsSkipClosestHitShaderNV;

	float oldHitT = payload.hitT;
	payload.hitT = 0;
	traceNV(TLAS,
		rayFlags,		// uint rayFlags
		~0u, 			// uint cullMask
		0u,	 			// uint sbtRecordOffset
		1u, 			// uint sbtRecordStride
		0u,				// uint missIndex
		ray.origin,		// vec3 origin
		ray.minT,	    // float Tmin
		ray.direction,  // vec3 direction
		ray.maxT,		// float Tmax
		0				// int payload
	);

	bool isHit = payload.hitT >= 0;
	payload.hitT = oldHitT;
	return isHit;
}

vec3 getSunDirection()
{
	return normalize(vec3(3, 5, 3));
}

vec3 getSunColor()
{
	return vec3(0.95, 0.90, 0.8) * 2.5 * M_PI;
}

vec3 getSimpleSkyColor(vec3 dir)
{
	if (USE_DEBUG_FURNECE)
	{		
		return vec3(1.0);
	}
	else if(USE_DEBUG_SKY)
	{
		vec3 dummy;
		return modf((dir*0.5+0.5) * 10, dummy);
	}
	else
	{
		vec3 colorT = vec3(0.5, 0.66, 0.9) * 2.0;
		vec3 colorB = vec3(0.15, 0.18, 0.15);
		float a = dir.y * 0.5 + 0.5;
		return mix(colorB, colorT, a);
	}
}

struct LightSample
{
	vec3 w;
	vec3 value;
	float pdfW;
};

LightSample sampleEnvmap(vec3 dir)
{
	LightSample result;
	vec4 envmapSample = texture(sampler2D(envmapTexture, defaultSampler), cartesianToLatLongTexcoord(dir));
	result.w = dir * mat3(matEnvmapTransform);
	result.value = envmapSample.rgb;
	result.pdfW = envmapSample.a;
	return result;
}

LightSample importanceSampleEnvmap(inout uint randomSeed)
{
	return sampleEnvmap(importanceSampleSkyLightDir(randomSeed));
}

void main()
{
	ivec2 pixelIndex = ivec2(gl_LaunchIDNV.xy);
	vec2 pixelUV = vec2(pixelIndex)/vec2(outputSize);

	uint pixelLinearIndex = pixelIndex.x + pixelIndex.y * outputSize.y;

	uint pixelRandomSeed = hashFnv1(pixelLinearIndex + pixelLinearIndex * 1294974679);
	uint randomSeed = hashFnv1(pixelRandomSeed + frameIndex);

	vec2 pixelJitter = (randomFloat2(randomSeed) - 0.5) / outputSize;

	vec3 result = vec3(0);
	vec3 throughput = vec3(1);

	RayDesc primaryRay;
	primaryRay.minT = 0;
	primaryRay.maxT = 1e9;
	primaryRay.origin = cameraPosition.xyz;
	primaryRay.direction = getCameraViewVector(pixelUV + pixelJitter);

	if (bool(flags & PT_FLAG_USE_DEPTH_OF_FIELD))
	{
		vec3 focusPoint = primaryRay.origin + primaryRay.direction * (focusDistance / dot(matView[2].xyz, primaryRay.direction));
		vec2 apertureSample = sampleUniformDisk(randomSeed) * 0.5;
		primaryRay.origin += (matView[0].xyz * apertureSample.x + matView[1].xyz * apertureSample.y) * apertureSize;
		primaryRay.direction = normalize(focusPoint - primaryRay.origin);
	}

	uint maxPathLength = USE_DEBUG_FURNECE ? 2 : 5;

	float scatterPdfW = 1e9;
	float roughnessBias = 0;

	const bool useEnvmap = bool(flags & PT_FLAG_USE_ENVMAP);

	for(uint i=0; i<=maxPathLength; ++i)
	{
		bool isHit = traceRay(primaryRay);

		if (USE_DEBUG_FURNECE && i > 0) isHit = false;

		if (USE_ROUGHNESS_BIAS)
		{
			#if 0
			float oldRoughness = payload.roughness;
			payload.roughness = min(1.0, payload.roughness + roughnessBias);
			roughnessBias += oldRoughness * 0.75f;
			#else
			// Path roughnening as per https://www.arnoldrenderer.com/research/physically_based_shader_design_in_arnold.pdf
			// "Avoiding Caustic Paths", fig. 14
			payload.roughness = max(payload.roughness, roughnessBias);
			roughnessBias = payload.roughness;
			#endif
		}

		if (!isHit)
		{
			if (i==0 && (flags&PT_FLAG_USE_NEUTRAL_BACKGROUND)!=0)
			{
				result = vec3(0.25);
			}
			else if (useEnvmap)
			{
				LightSample ls = sampleEnvmap(mat3(matEnvmapTransform) * primaryRay.direction);
				float misWeight = powerHeuristic(scatterPdfW, ls.pdfW);
				result += throughput * ls.value * misWeight;
			}
			else
			{
				result += throughput * getSimpleSkyColor(primaryRay.direction);
			}

			// We hit the sky, so we're done
			break;
		}

		if (USE_DEBUG_FURNECE) payload.baseColor = vec3(1);
		if (USE_DEBUG_REFLECTIONS && i==0) payload.baseColor = vec3(1);

		const vec3 N = normalize(payload.normal);
		const vec3 V = -primaryRay.direction;

		if (i == maxPathLength) break;

		if (USE_DIRECT_LIGHTING && !USE_DEBUG_FURNECE && (!USE_DEBUG_REFLECTIONS || i > 0))
		{
			vec3 L = vec3(0, 0, 1);
			vec3 lightColor = vec3(0.0);
			float lightPdfW = 0.0;

			if (useEnvmap)
			{
				LightSample ls = importanceSampleEnvmap(randomSeed);
				L = ls.w;
				lightColor = ls.value;
				lightPdfW = ls.pdfW;
			}
			else
			{
				L = getSunDirection();
				lightColor = getSunColor();
				lightPdfW = 1;
			}

			RayDesc shadowRay;

			shadowRay.origin = primaryRay.origin + primaryRay.direction * payload.hitT;
			shadowRay.origin += payload.geoNormal * max3(abs(shadowRay.origin)) * 1e-4;
			shadowRay.direction = L;
			shadowRay.minT = 0.0;
			shadowRay.maxT = 1e9;

			float NoL = dot(N, L);

			if (NoL > 0 && lightPdfW > 0 && !traceShadowRay(shadowRay))
			{
				{
					vec3 H = normalize(V + L);

					float NoH = max(0, dot(N, H));
					float LoH = max(0, dot(L, H));
					float VoH = max(0, dot(V, H));

					float sD = D_GGX(unpack(payload).linearRoughness, NoH);
					float sG = G1_Smith(unpack(payload).linearRoughness, NoL);
					vec3  sF = F_Schlick(unpack(payload).specularColor, 1.0, LoH);

					float denom = (4.0 * VoH);
					float brdfPdfW = denom > 0 ? sD * NoH / denom : 0;
					vec3 brdf = sD * sG * sF;

					float misWeight = useEnvmap ? powerHeuristic(lightPdfW, brdfPdfW) : 1.0;
					result += throughput * lightColor * brdf * misWeight / (lightPdfW * 2);
				}

				{
					float brdfPdfW = 1.0 / M_PI;
					vec3 brdf = unpack(payload).diffuseColor * NoL;

					float misWeight = useEnvmap ? powerHeuristic(lightPdfW, brdfPdfW) : 1.0;
					result += throughput * lightColor * brdf * misWeight / (lightPdfW * 2);
				}
			}
		}

		// Generate next ray

		primaryRay.origin = primaryRay.origin + primaryRay.direction * payload.hitT;
		primaryRay.origin += payload.geoNormal * max3(abs(primaryRay.origin)) * 1e-4;

		vec2 reflectionSampleUV = randomFloat2(randomSeed);
		if (i==0)
		{
			vec2 modResultInt;
			reflectionSampleUV = modf(Halton23(int(frameIndex)) + randomFloat2(pixelRandomSeed), modResultInt);
		}

		const float specularProbability = USE_INDIRECT_SPECULAR ? clamp(payload.metalness, 0.1, 0.9) : 0.0;
		bool isSpecular = randomFloat(randomSeed) <= specularProbability;

		if (isSpecular)
		{
			mat3 basis = makeOrthonormalBasis(N);
			vec3 H = normalize(basis * importanceSampleDGGXVNDF(reflectionSampleUV, unpack(payload).linearRoughness, V * basis));
			vec3 L = reflect(-V, H);

			float NoL = max(0, dot(N, L));
			float NoH = max(0, dot(N, H));
			float LoH = max(0, dot(L, H));
			float VoH = max(0, dot(V, H));

			float sD = D_GGX(unpack(payload).linearRoughness, NoH);
			float sG = G1_Smith(unpack(payload).linearRoughness, NoL);
			vec3  sF = F_Schlick(unpack(payload).specularColor, 1.0, LoH);

			throughput *= sF * sG;
			throughput /= specularProbability;

			primaryRay.direction = L;
			float denom = (4.0 * VoH);
			scatterPdfW = denom > 0 ? sD * NoH / denom : 0;
		}
		else
		{
			throughput *= USE_INDIRECT_SPECULAR ? unpack(payload).diffuseColor : payload.baseColor;
			throughput /= (1.0-specularProbability);

			primaryRay.direction = normalize(N + mapToUniformSphere(reflectionSampleUV));
			scatterPdfW = 1.0 / M_PI;
		}
	}

	if (frameIndex > 0)
	{
		vec3 oldValue = imageLoad(outputImage, pixelIndex).rgb;
		result = mix(oldValue, result, 1.0 / (frameIndex+1));
	}

	imageStore(outputImage, pixelIndex, vec4(result, 1));
}
