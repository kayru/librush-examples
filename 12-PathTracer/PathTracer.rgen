#version 460
#extension GL_NV_ray_tracing : enable

#include "Common.glsl"
#include "BRDF.glsl"

#define USE_DEBUG_FURNECE          false
#define USE_DEBUG_REFLECTIONS      false
#define USE_DEBUG_SKY              false
#define USE_DIRECT_LIGHTING        true
#define USE_INDIRECT_SPECULAR      true

layout(location = 0) rayPayloadNV DefaultPayload payload;

vec3 getCameraViewVector(vec2 uv)
{
	vec3 viewVector = vec3((uv-0.5) * 2, 1);
	viewVector.x /= matProj[0].x;
	viewVector.y /= matProj[1].y;
	return normalize(viewVector * transpose(mat3(matView)));
}

bool traceRay(RayDesc ray)
{
	uint rayFlags = gl_RayFlagsOpaqueNV;

	payload.hitT = 0;
	traceNV(TLAS,
		rayFlags,		// uint rayFlags
		~0u, 			// uint cullMask
		0u,	 			// uint sbtRecordOffset
		1u, 			// uint sbtRecordStride
		0u,				// uint missIndex
		ray.origin,		// vec3 origin
		ray.minT,	    // float Tmin
		ray.direction,  // vec3 direction
		ray.maxT,		// float Tmax
		0				// int payload
	);

	return payload.hitT >= 0;
}

bool traceShadowRay(RayDesc ray)
{
	uint rayFlags = gl_RayFlagsOpaqueNV | gl_RayFlagsTerminateOnFirstHitNV | gl_RayFlagsSkipClosestHitShaderNV;

	float oldHitT = payload.hitT;
	payload.hitT = 0;
	traceNV(TLAS,
		rayFlags,		// uint rayFlags
		~0u, 			// uint cullMask
		0u,	 			// uint sbtRecordOffset
		1u, 			// uint sbtRecordStride
		0u,				// uint missIndex
		ray.origin,		// vec3 origin
		ray.minT,	    // float Tmin
		ray.direction,  // vec3 direction
		ray.maxT,		// float Tmax
		0				// int payload
	);

	bool isHit = payload.hitT >= 0;
	payload.hitT = oldHitT;
	return isHit;
}

vec3 getSunDirection()
{
	return normalize(vec3(3, 5, 3));
}

vec3 getSunColor()
{
	return vec3(0.95, 0.90, 0.8) * 2.5 * M_PI;
}

vec3 getSkyColor(vec3 dir)
{
	if (USE_DEBUG_FURNECE)
	{		
		return vec3(1.0);
	}
	else if(USE_DEBUG_SKY)
	{
		vec3 dummy;
		return modf((dir*0.5+0.5) * 10, dummy);
	}
	else if ((flags&PT_FLAG_USE_ENVMAP)!=0)
	{
		vec2 uv = cartesianToLatLongTexcoord(dir);
		vec3 s = texture(sampler2D(envmapTexture, defaultSampler), uv).rgb * 5.0;
		return s;
	}
	else
	{
		vec3 colorT = vec3(0.5, 0.66, 0.9) * 2.0;
		vec3 colorB = vec3(0.15, 0.18, 0.15);
		float a = dir.y * 0.5 + 0.5;
		return mix(colorB, colorT, a);
	}
}

void main()
{
	ivec2 pixelIndex = ivec2(gl_LaunchIDNV.xy);
	vec2 pixelUV = vec2(pixelIndex)/vec2(outputSize);

	uint pixelLinearIndex = pixelIndex.x + pixelIndex.y * outputSize.y;

	uint pixelRandomSeed = hashFnv1(pixelLinearIndex + pixelLinearIndex * 1294974679);
	uint randomSeed = hashFnv1(pixelRandomSeed + frameIndex);

	vec2 pixelJitter = (randomFloat2(randomSeed) - 0.5) / outputSize;

	vec3 result = vec3(0);
	vec3 weight = vec3(1);

	RayDesc primaryRay;
	primaryRay.minT = 0;
	primaryRay.maxT = 1e9;
	primaryRay.origin = cameraPosition.xyz;
	primaryRay.direction = getCameraViewVector(pixelUV + pixelJitter);

	uint maxPathLength = USE_DEBUG_FURNECE ? 2 : 5;

	for(uint i=0; i<maxPathLength; ++i)
	{
		bool isHit = traceRay(primaryRay);

		if (!isHit)
		{
			if (i==0 && (flags&PT_FLAG_USE_NEUTRAL_BACKGROUND)!=0)
			{
				result = vec3(0.25);
			}
			else
			{
				result += weight * getSkyColor(primaryRay.direction);
			}

			// We hit the sky, so we're done
			break;
		}

		if (USE_DEBUG_FURNECE) payload.baseColor = vec3(1);
		if (USE_DEBUG_REFLECTIONS && i==0) payload.baseColor = vec3(1);


		const vec3 L = getSunDirection();
		const vec3 N = payload.normal;
		const vec3 V = -primaryRay.direction;
		const float NoL = dot(N, L);

		if (NoL > 0 && USE_DIRECT_LIGHTING && !USE_DEBUG_FURNECE && (!USE_DEBUG_REFLECTIONS || i > 0) && (flags&PT_FLAG_USE_ENVMAP)==0)
		{
			RayDesc shadowRay;
			shadowRay.origin = primaryRay.origin + primaryRay.direction * payload.hitT;
			shadowRay.origin += payload.geoNormal * max3(abs(shadowRay.origin)) * 1e-4;
			shadowRay.direction = L;
			shadowRay.minT = 0.0;
			shadowRay.maxT = 1e9;

			bool isLightOccluded = traceShadowRay(shadowRay);
			if (!isLightOccluded)
			{
				Surface surface = unpack(payload);
				result += weight * evalSurface(surface, V, L) * getSunColor();
			}
		}

		// Generate next ray

		primaryRay.origin = primaryRay.origin + primaryRay.direction * payload.hitT;
		primaryRay.origin += payload.geoNormal * max3(abs(primaryRay.origin)) * 1e-4;

		vec2 reflectionSampleUV = randomFloat2(randomSeed);
		if (i==0)
		{
			vec2 modResultInt;
			reflectionSampleUV = modf(Halton23(int(frameIndex)) + randomFloat2(pixelRandomSeed), modResultInt);
		}

		primaryRay.direction = normalize(N + mapToUniformSphere(reflectionSampleUV));

		bool isSpecular = USE_INDIRECT_SPECULAR && randomFloat(randomSeed) < 0.5;

		if (isSpecular)
		{
			float linearRoughness = max(0.0001, payload.roughness * payload.roughness);
			mat3 basis = makeOrthonormalBasis(N);
			vec3 H = vec3(0,0,1);
			vec3 L = vec3(0,0,1);
			for (int i=0; i<16; ++i) // Try to generate a valid ray
			{
				H = basis * importanceSamplingNdfDggx(reflectionSampleUV, linearRoughness);
				L = reflect(-V, H);
				if (dot(L, payload.normal) > 0)
				{
					primaryRay.direction = L;
					break;
				}
				reflectionSampleUV = randomFloat2(randomSeed);
			}

			float LoH = max(0, dot(L, H));
			vec3 fresnel = F_Schlick(unpack(payload).specularColor, 1.0, LoH);

			weight *= fresnel;
		}
		else
		{
			weight *= USE_INDIRECT_SPECULAR ? unpack(payload).diffuseColor : payload.baseColor;
		}
	}

	if (frameIndex > 0)
	{
		vec3 oldValue = imageLoad(outputImage, pixelIndex).rgb;
		result = mix(oldValue, result, 1.0 / (frameIndex+1));
	}

	imageStore(outputImage, pixelIndex, vec4(result, 1));
}
